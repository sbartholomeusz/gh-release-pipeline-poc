name: create-release

on:
  # Run workflow manually
  workflow_dispatch:

  push:
    branches:
      - main

defaults:
  run:
    shell: bash
    working-directory: ./src

env:
  DOTNET_VERSION: '7.0.x'
  GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_ACCOUNT_NAME: ${{ github.repository_owner }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          #source-url: https://nuget.pkg.github.com/${{ env.GH_ACCOUNT_NAME }}/index.json

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build
          
  package:
    needs: test
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGE_PATH: './nupkg'
      PUBLISH_PATH: '${{ github.workspace }}/publish'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          #source-url: https://nuget.pkg.github.com/${{ env.GH_ACCOUNT_NAME }}/index.json

      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish
        run: dotnet publish ./hello-world.csproj --configuration Release --no-restore --output ${{ env.PUBLISH_PATH }}

      - name: Debug
        run: |
          pwd
          echo 1
          ls -l
          echo 2
          ls ${{ github.workspace }} -l
          echo 3
          ls ${{ env.PUBLISH_PATH }} -l

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hello-world-package
          path: ${{ env.PUBLISH_PATH }}
          if-no-files-found: error
          retention-days: 7

      #- name: Package
      #  run: dotnet pack --output ${{env.NUGET_PACKAGE_PATH}} --configuration Release --no-build --no-restore

  publish:
    needs: package
    runs-on: ubuntu-latest
    env:
      RELEASE_DIR: '${{ github.workspace }}/hello-world-package'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: hello-world-package
          path: ${{env.RELEASE_DIR}}

      - name: Set release version
        id: versioner
        run: echo "::set-output name=new_ver_number::$(date +'%-Y.%-m.%-d').$GITHUB_RUN_NUMBER"

      - name: Publish release
        run: gh release create v${{ steps.versioner.outputs.new_ver_number }} ${{env.RELEASE_DIR}}/* --draft --generate-notes
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_ACCESS_TOKEN }}
